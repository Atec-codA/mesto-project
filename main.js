(()=>{"use strict";var __webpack_modules__={791:()=>{eval("\n;// CONCATENATED MODULE: ./src/components/modal.js\n// Open popup\n\nvar openPopup = function openPopup(popup) {\n  popup.classList.add('popup_opened');\n  document.addEventListener('keydown', closeEsc);\n  document.addEventListener('mousedown', closeOverlay);\n};\n\n// Close popup\n\nvar closePopup = function closePopup(popup) {\n  popup.classList.remove('popup_opened');\n  document.removeEventListener('keydown', closeEsc);\n  document.removeEventListener('mousedown', closeOverlay);\n};\n\n// Close popup from Esc\n\nvar closeEsc = function closeEsc(evt) {\n  if (evt.key === \"Escape\") {\n    closePopup(document.querySelector('.popup_opened'));\n  }\n};\n\n// Close popup from overlay click\n\nvar closeOverlay = function closeOverlay(evt) {\n  if (evt.target.classList.contains('popup')) {\n    closePopup(evt.target);\n  }\n};\n;// CONCATENATED MODULE: ./src/components/validate.js\n// Show error text \n\nvar showInputError = function showInputError(formElement, inputElement, errorMessage, settings) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.add(settings.inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(settings.errorClass);\n};\n\n// Hide error text\n\nvar hideInputError = function hideInputError(formElement, inputElement, settings) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.remove(settings.inputErrorClass);\n  errorElement.classList.remove(settings.errorClass);\n  errorElement.textContent = '';\n};\n\n// Validity check\n\nvar checkInputValidity = function checkInputValidity(formElement, inputElement, settings) {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n  if (!inputElement.validity.valid) {\n    showInputError(formElement, inputElement, inputElement.validationMessage, settings);\n  } else {\n    hideInputError(formElement, inputElement, settings);\n  }\n};\nvar setEventListeners = function setEventListeners(formElement, settings) {\n  var inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\n  var buttonElement = formElement.querySelector(settings.submitButtonSelector);\n  toggleButtonState(inputList, buttonElement, settings);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener('input', function () {\n      checkInputValidity(formElement, inputElement, settings);\n      toggleButtonState(inputList, buttonElement, settings);\n    });\n  });\n};\n\n// Enable validation\n\nvar enableValidation = function enableValidation(settings) {\n  var formList = Array.from(document.querySelectorAll(settings.formSelector));\n  formList.forEach(function (formElement) {\n    formElement.addEventListener('submit', function (evt) {\n      evt.preventDefault();\n    });\n    setEventListeners(formElement, settings);\n  });\n};\n\n// Check invalid input\n\nvar hasInvalidInput = function hasInvalidInput(inputList) {\n  return inputList.some(function (inputElement) {\n    return !inputElement.validity.valid;\n  });\n};\n\n// Control submit button\n\nvar toggleButtonState = function toggleButtonState(inputList, buttonElement, settings) {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(settings.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(settings.inactiveButtonClass);\n  }\n};\n\n// Button submit disable function\n\nvar btnDisabled = function btnDisabled(buttonElement, settings) {\n  buttonElement.disabled = true;\n  buttonElement.classList.add(settings.inactiveButtonClass);\n};\n;// CONCATENATED MODULE: ./src/components/constants.js\n// Validation ( validate.js ) \n\nvar enableValidationSettings = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__save-button',\n  inactiveButtonClass: 'popup__save-button_type_inactive',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__input-error_type_active'\n};\n\n// Profile popup ( modal.js )\n\nvar popupProfile = document.querySelector('#popupProfile');\nvar popupProfileOpenButton = document.querySelector('.profile__button-edit');\nvar popupProfileForm = popupProfile.querySelector('#popupProfileForm');\nvar nameInput = popupProfileForm.querySelector('#name-input');\nvar jobInput = popupProfileForm.querySelector('#about-input');\nvar profileAvatar = document.querySelector('.profile__avatar');\nvar profileSubmitBtn = popupProfileForm.querySelector('.popup__save-button');\n\n// Card popup ( modal.js )\n\nvar popupCard = document.querySelector('#popupCard');\nvar popupCardOpenButton = document.querySelector('#AddButton');\nvar popupCardForm = popupCard.querySelector('#popupCardForm');\nvar inputPopupName = popupCardForm.querySelector('#card-name');\nvar inputUrl = popupCardForm.querySelector('#input-url');\nvar cardSubmitBtn = popupCardForm.querySelector('.popup__save-button');\n\n// Actual Profile name and Job ( modal.js )\n\nvar profileName = document.querySelector('.profile__title');\nvar profileJob = document.querySelector('.profile__subtitle');\n\n// Constants for render card's ( cards.js )\n\nvar cardsContainer = document.querySelector('.elements__cards');\nvar cardTemplate = document.querySelector('#card').content;\n\n// Image popup ( modal.js )\n\nvar imagePopup = document.querySelector('.popup_image');\nvar constants_image = document.querySelector('.popup__image-zoom');\nvar caption = document.querySelector('.popup__image-figcaption');\nvar closeButtons = document.querySelectorAll('.popup__close-icon');\n\n// Avatar popup ( index.js )\n\nvar avatarPopup = document.querySelector('.popup_avatar');\nvar avatarForm = avatarPopup.querySelector('.popup__form-avatar');\nvar avatarPhotoInput = avatarForm.querySelector('.popup__input');\nvar avatarSubmitBtn = avatarForm.querySelector('.popup__save-button');\n;// CONCATENATED MODULE: ./src/components/api.js\nvar config = {\n  baseUrl: 'https://nomoreparties.co/v1/plus-cohort-19',\n  headers: {\n    authorization: '84a824a1-ebc5-4e78-9013-e4331df145ed',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Response check\n\nvar checkResponse = function checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n};\n\n// Get user data\n\nvar getSrvUser = function getSrvUser() {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    headers: config.headers\n  }).then(checkResponse);\n};\n\n// Downloading cards from the server\n\nvar getSrvCards = function getSrvCards() {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    headers: config.headers\n  }).then(checkResponse);\n};\n\n// Edit avatar\n\nvar changeAvatar = function changeAvatar(photo) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me/avatar\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      avatar: photo\n    })\n  }).then(checkResponse);\n};\n\n// Edit name and about info\n\nvar editProfile = function editProfile(name, about) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: name,\n      about: about\n    })\n  }).then(checkResponse);\n};\n\n// Add card\n\nvar createNewCard = function createNewCard(link, name) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: name,\n      link: link\n    })\n  }).then(checkResponse);\n};\n\n// Delete card\n\nvar deleteCard = function deleteCard(card) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/\").concat(card), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(checkResponse);\n};\n\n// Add like\n\nvar addLike = function addLike(card) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(card), {\n    method: 'PUT',\n    headers: config.headers\n  }).then(checkResponse);\n};\n\n// Delete like\n\nvar deleteLike = function deleteLike(card) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(card), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(checkResponse);\n};\n;// CONCATENATED MODULE: ./src/components/card.js\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n// Import from constants.js\n\n\n\n// Import from modal.js\n\n\n\n// Import from api.js\n\n\n\n// Add, delete, likes cards\n\nvar createCard = function createCard(data, user) {\n  var cardElement = cardTemplate.querySelector('.card').cloneNode(true);\n  var cardImage = cardElement.querySelector('.card__image');\n  var cardTitle = cardElement.querySelector('.card__title');\n  var cardTrashBtn = cardElement.querySelector('.card__trash-button');\n  var cardLikeBtn = cardElement.querySelector('.card__like-button');\n  var cardLikeNum = cardElement.querySelector('.card__like-num');\n  cardImage.src = data.link;\n  cardImage.alt = data.name;\n  cardTitle.textContent = data.name;\n  cardLikeNum.textContent = data.likes.length;\n\n  // Delete user card's\n\n  if (user._id === data.owner._id) {\n    cardTrashBtn.classList.add('element__trash-button_active'); // НЕТУУУУУ\n    cardTrashBtn.addEventListener('click', function () {\n      deleteCard(data._id).then(function () {\n        removeCard(cardTrashBtn);\n      }).catch(function (err) {\n        console.error(err);\n      });\n    });\n  }\n\n  // Active like's on card\n  var _iterator = _createForOfIteratorHelper(data.likes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      if (item._id.includes(user._id)) {\n        cardLikeBtn.classList.add('card__like-button_active');\n      }\n    }\n\n    // New like's on card\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  cardLikeBtn.addEventListener('click', function (evt) {\n    if (!evt.target.classList.contains('card__like-button_active')) {\n      addLike(data._id).then(function (data) {\n        evt.target.classList.add('card__like-button_active');\n        cardLikeNum.textContent = data.likes.length;\n      }).catch(function (err) {\n        console.error(err);\n      });\n    } else {\n      deleteLike(data._id).then(function (data) {\n        evt.target.classList.remove('card__like-button_active');\n        cardLikeNum.textContent = data.likes.length;\n      }).catch(function (err) {\n        console.error(err);\n      });\n    }\n  });\n  cardImage.addEventListener('click', function () {\n    openPopup(imagePopup);\n    constants_image.src = data.link;\n    constants_image.alt = data.name;\n    caption.textContent = data.name;\n  });\n  return cardElement;\n};\n\n// Delete card\n\nfunction removeCard(card) {\n  var element = card.closest('.card');\n  element.remove();\n}\n;\n;// CONCATENATED MODULE: ./src/components/index.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || components_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction components_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return components_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return components_arrayLikeToArray(o, minLen); }\nfunction components_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n// Import from modal.js\n\n\n\n// Import from validate.js\n\n\n\n// Import from constants.js\n\n\n\n// Import from card.js\n\n\n\n// Import from api.js\n\n\n\n// User data\n\nvar user = {};\n\n// Load data and cards from server\n\nPromise.all([getSrvUser(), getSrvCards()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    srvUser = _ref2[0],\n    cards = _ref2[1];\n  user = srvUser;\n  profileName.textContent = user.name;\n  profileJob.textContent = user.about;\n  profileAvatar.src = user.avatar;\n  cards.reverse().forEach(function (data) {\n    cardsContainer.prepend(createCard(data, user));\n  });\n}).catch(function (err) {\n  console.error(err);\n});\nfunction changeProfile(evt) {\n  evt.preventDefault();\n  profileSubmitBtn.textContent = 'Сохранение...';\n  editProfile(nameInput.value, jobInput.value).then(function () {\n    profileName.textContent = nameInput.value;\n    profileJob.textContent = jobInput.value;\n    closePopup(popupProfile);\n  }).catch(function (err) {\n    console.error(err);\n  }).finally(function () {\n    profileSubmitBtn.textContent = 'Сохранить';\n  });\n}\n\n// Edit avatar\n\nfunction changeAvatarProfile(evt) {\n  evt.preventDefault();\n  avatarSubmitBtn.textContent = 'Сохранение...';\n  var avatar = avatarPhotoInput.value;\n  changeAvatar(avatar).then(function (item) {\n    profileAvatar.src = item.avatar;\n    avatarForm.reset();\n    evt.target.reset();\n    closePopup(avatarPopup);\n  }).catch(function (err) {\n    console.error(err);\n  }).finally(function () {\n    avatarSubmitBtn.textContent = 'Сохранить';\n  });\n}\n\n// Add new card\n\nfunction addNewCard(evt) {\n  evt.preventDefault();\n  cardSubmitBtn.textContent = 'Создание...';\n  createNewCard(inputUrl.value, inputPopupName.value).then(function (data) {\n    cardsContainer.prepend(createCard(data, user));\n    evt.target.reset();\n    closePopup(popupCard);\n  }).catch(function (err) {\n    console.error(err);\n  }).finally(function () {\n    cardSubmitBtn.textContent = 'Создать';\n  });\n}\n\n// Listener for open ProfilePopup\n\npopupProfileOpenButton.addEventListener('click', function () {\n  openPopup(popupProfile);\n  jobInput.value = profileJob.textContent;\n  nameInput.value = profileName.textContent;\n});\n\n// Listener for open CardPopup\n\npopupCardOpenButton.addEventListener('click', function () {\n  var submButton = popupCard.querySelector(enableValidationSettings.submitButtonSelector);\n  openPopup(popupCard);\n  popupCardForm.reset();\n  btnDisabled(submButton, enableValidationSettings);\n});\n\n// Listener for open Avatar popup\n\nprofileAvatar.addEventListener('click', function () {\n  openPopup(avatarPopup);\n});\n\n// Listener for close popup's\n\ncloseButtons.forEach(function (button) {\n  var popup = button.closest('.popup');\n  button.addEventListener('click', function () {\n    return closePopup(popup);\n  });\n});\n\n// Listener for profile submit button (  )  \n\npopupProfileForm.addEventListener('submit', changeProfile);\n\n// Listener for card submit button ( card.js )\n\npopupCardForm.addEventListener('submit', addNewCard);\n\n// Render cards from array ( database.js )\n\navatarForm.addEventListener('submit', changeAvatarProfile);\n\n// Enable validation ( validate.js )\n\nenableValidation(enableValidationSettings);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///791\n")}},__webpack_exports__={};__webpack_modules__[791]()})();